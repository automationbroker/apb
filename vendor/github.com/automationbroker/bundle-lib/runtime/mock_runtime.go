// Code generated by mockery v1.0.0. DO NOT EDIT.
package runtime

import (
	mock "github.com/stretchr/testify/mock"
)

// MockRuntime is an autogenerated mock type for the MockRuntime type
type MockRuntime struct {
	mock.Mock
}

// CopySecretsToNamespace provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockRuntime) CopySecretsToNamespace(_a0 ExecutionContext, _a1 string, _a2 []string) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(ExecutionContext, string, []string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CopyState provides a mock function with given fields: fromName, toName, fromNS, toNS
func (_m *MockRuntime) CopyState(fromName string, toName string, fromNS string, toNS string) error {
	ret := _m.Called(fromName, toName, fromNS, toNS)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(fromName, toName, fromNS, toNS)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateExtractedCredential provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockRuntime) CreateExtractedCredential(_a0 string, _a1 string, _a2 map[string]interface{}, _a3 map[string]string) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}, map[string]string) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSandbox provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *MockRuntime) CreateSandbox(_a0 string, _a1 string, _a2 []string, _a3 string, _a4 map[string]string) (string, string, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, []string, string, map[string]string) string); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string, []string, string, map[string]string) string); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, []string, string, map[string]string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteExtractedCredential provides a mock function with given fields: _a0, _a1
func (_m *MockRuntime) DeleteExtractedCredential(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteState provides a mock function with given fields: name
func (_m *MockRuntime) DeleteState(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DestroySandbox provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *MockRuntime) DestroySandbox(_a0 string, _a1 string, _a2 []string, _a3 string, _a4 bool, _a5 bool) {
	_m.Called(_a0, _a1, _a2, _a3, _a4, _a5)
}

// ExtractCredentials provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockRuntime) ExtractCredentials(_a0 string, _a1 string, _a2 int) ([]byte, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string, int) []byte); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExtractedCredential provides a mock function with given fields: _a0, _a1
func (_m *MockRuntime) GetExtractedCredential(_a0 string, _a1 string) (map[string]interface{}, error) {
	ret := _m.Called(_a0, _a1)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string) map[string]interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMockRuntime provides a mock function with given fields:
func (_m *MockRuntime) GetRuntime() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MasterName provides a mock function with given fields: instanceID
func (_m *MockRuntime) MasterName(instanceID string) string {
	ret := _m.Called(instanceID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(instanceID)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MasterNamespace provides a mock function with given fields:
func (_m *MockRuntime) MasterNamespace() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MountLocation provides a mock function with given fields:
func (_m *MockRuntime) MountLocation() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RunBundle provides a mock function with given fields: _a0
func (_m *MockRuntime) RunBundle(_a0 ExecutionContext) (ExecutionContext, error) {
	ret := _m.Called(_a0)

	var r0 ExecutionContext
	if rf, ok := ret.Get(0).(func(ExecutionContext) ExecutionContext); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ExecutionContext)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ExecutionContext) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateIsPresent provides a mock function with given fields: name
func (_m *MockRuntime) StateIsPresent(name string) (bool, error) {
	ret := _m.Called(name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExtractedCredential provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockRuntime) UpdateExtractedCredential(_a0 string, _a1 string, _a2 map[string]interface{}, _a3 map[string]string) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}, map[string]string) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateMockRuntime provides a mock function with given fields:
func (_m *MockRuntime) ValidateRuntime() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WatchRunningBundle provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockRuntime) WatchRunningBundle(_a0 string, _a1 string, _a2 UpdateDescriptionFn) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, UpdateDescriptionFn) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
