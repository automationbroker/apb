/*
Copyright (c) 2018 Red Hat, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/automationbroker/broker-client-go/pkg/apis/automationbroker/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BundleInstanceLister helps list BundleInstances.
type BundleInstanceLister interface {
	// List lists all BundleInstances in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BundleInstance, err error)
	// BundleInstances returns an object that can list and get BundleInstances.
	BundleInstances(namespace string) BundleInstanceNamespaceLister
	BundleInstanceListerExpansion
}

// bundleInstanceLister implements the BundleInstanceLister interface.
type bundleInstanceLister struct {
	indexer cache.Indexer
}

// NewBundleInstanceLister returns a new BundleInstanceLister.
func NewBundleInstanceLister(indexer cache.Indexer) BundleInstanceLister {
	return &bundleInstanceLister{indexer: indexer}
}

// List lists all BundleInstances in the indexer.
func (s *bundleInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.BundleInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BundleInstance))
	})
	return ret, err
}

// BundleInstances returns an object that can list and get BundleInstances.
func (s *bundleInstanceLister) BundleInstances(namespace string) BundleInstanceNamespaceLister {
	return bundleInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BundleInstanceNamespaceLister helps list and get BundleInstances.
type BundleInstanceNamespaceLister interface {
	// List lists all BundleInstances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BundleInstance, err error)
	// Get retrieves the BundleInstance from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BundleInstance, error)
	BundleInstanceNamespaceListerExpansion
}

// bundleInstanceNamespaceLister implements the BundleInstanceNamespaceLister
// interface.
type bundleInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BundleInstances in the indexer for a given namespace.
func (s bundleInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BundleInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BundleInstance))
	})
	return ret, err
}

// Get retrieves the BundleInstance from the indexer for a given namespace and name.
func (s bundleInstanceNamespaceLister) Get(name string) (*v1alpha1.BundleInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bundleinstance"), name)
	}
	return obj.(*v1alpha1.BundleInstance), nil
}
