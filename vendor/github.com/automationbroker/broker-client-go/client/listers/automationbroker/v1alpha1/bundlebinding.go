/*
Copyright (c) 2018 Red Hat, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/automationbroker/broker-client-go/pkg/apis/automationbroker/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BundleBindingLister helps list BundleBindings.
type BundleBindingLister interface {
	// List lists all BundleBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BundleBinding, err error)
	// BundleBindings returns an object that can list and get BundleBindings.
	BundleBindings(namespace string) BundleBindingNamespaceLister
	BundleBindingListerExpansion
}

// bundleBindingLister implements the BundleBindingLister interface.
type bundleBindingLister struct {
	indexer cache.Indexer
}

// NewBundleBindingLister returns a new BundleBindingLister.
func NewBundleBindingLister(indexer cache.Indexer) BundleBindingLister {
	return &bundleBindingLister{indexer: indexer}
}

// List lists all BundleBindings in the indexer.
func (s *bundleBindingLister) List(selector labels.Selector) (ret []*v1alpha1.BundleBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BundleBinding))
	})
	return ret, err
}

// BundleBindings returns an object that can list and get BundleBindings.
func (s *bundleBindingLister) BundleBindings(namespace string) BundleBindingNamespaceLister {
	return bundleBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BundleBindingNamespaceLister helps list and get BundleBindings.
type BundleBindingNamespaceLister interface {
	// List lists all BundleBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BundleBinding, err error)
	// Get retrieves the BundleBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BundleBinding, error)
	BundleBindingNamespaceListerExpansion
}

// bundleBindingNamespaceLister implements the BundleBindingNamespaceLister
// interface.
type bundleBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BundleBindings in the indexer for a given namespace.
func (s bundleBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BundleBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BundleBinding))
	})
	return ret, err
}

// Get retrieves the BundleBinding from the indexer for a given namespace and name.
func (s bundleBindingNamespaceLister) Get(name string) (*v1alpha1.BundleBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bundlebinding"), name)
	}
	return obj.(*v1alpha1.BundleBinding), nil
}
